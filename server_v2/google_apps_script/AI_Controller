// üïπÔ∏è AI_Controller.gs
// Central styrfil f√∂r att k√∂ra Analytics, Sync och AutoUploader i r√§tt ordning,
// testa h√§lsa mot AI-servern och hantera tidstriggers.
// Funktioner:
//  ‚Ä¢ runFullSystem()       ‚Äì k√∂r analytics, sync och uploader sekventiellt och loggar resultat.
//  ‚Ä¢ testSystemHealth()    ‚Äì anropar AIConnector.getHealth() och loggar svaret.
//  ‚Ä¢ setupTriggers()       ‚Äì skapar daglig, timvis och 15-minuters triggers.
//  ‚Ä¢ clearTriggers()       ‚Äì tar bort alla projekttriggers.
// Hj√§lpfunktioner:
//  ‚Ä¢ _log(prefix, obj)     ‚Äì central loggning till Logger och AIConnector.logResult()
/* globals AIConnector, manualRun, manualAnalytics, manualSync, testAIConnector, AIUtils, ScriptApp, Logger */

function AI_Controller() {
  this.name = "AI_Controller_v3";
}

// üì¶ Central loggfunktion - skriver till Logger och f√∂rs√∂ker spara via AIConnector.logResult
AI_Controller.prototype._log = function(prefix, obj) {
  try {
    var ts = (AIUtils && AIUtils.formatTimestamp) ? AIUtils.formatTimestamp(new Date()) : new Date().toISOString();
    var message = '[' + prefix + '] ' + ts + ' - ' + (typeof obj === 'string' ? obj : JSON.stringify(obj));
    Logger.log(message);
  } catch (e) {
    try { Logger.log('[_log] Logger failure: ' + e); } catch (ignore) {}
  }

  try {
    if (typeof AIConnector !== 'undefined' && typeof AIConnector.logResult === 'function') {
      AIConnector.logResult({controller: this.name, prefix: prefix, payload: obj, timestamp: (new Date()).toISOString()}, 'controller_' + prefix);
    }
  } catch (e2) {
    try { Logger.log('‚ö†Ô∏è AIConnector.logResult misslyckades i _log: ' + e2); } catch (ignore) {}
  }
};

// ‚ñ∂Ô∏è runFullSystem - k√∂r Analytics, Sync och Uploader i sekvens
AI_Controller.prototype.runFullSystem = function() {
  var report = { timestamp: (new Date()).toISOString(), steps: {} };
  try {
    this._log('runFullSystem', 'Startar full system-k√∂rning');

    // 1) Analytics
    try {
      this._log('analytics', 'Startar manualAnalytics()');
      if (typeof manualAnalytics === 'function') {
        manualAnalytics();
        report.steps.analytics = { status: 'ok', note: 'manualAnalytics invoked' };
        this._log('analytics', 'manualAnalytics ok');
      } else {
        throw new Error('manualAnalytics function saknas');
      }
    } catch (aErr) {
      report.steps.analytics = { status: 'error', error: String(aErr) };
      this._log('analytics_error', String(aErr));
    }

    // 2) Sync Drive ‚Üî Sheet
    try {
      this._log('sync', 'Startar manualSync()');
      if (typeof manualSync === 'function') {
        manualSync();
        report.steps.sync = { status: 'ok', note: 'manualSync invoked' };
        this._log('sync', 'manualSync ok');
      } else {
        throw new Error('manualSync function saknas');
      }
    } catch (sErr) {
      report.steps.sync = { status: 'error', error: String(sErr) };
      this._log('sync_error', String(sErr));
    }

    // 3) AutoUploader
    try {
      this._log('uploader', 'Startar manualRun()');
      if (typeof manualRun === 'function') {
        manualRun();
        report.steps.uploader = { status: 'ok', note: 'manualRun invoked' };
        this._log('uploader', 'manualRun ok');
      } else {
        throw new Error('manualRun function saknas');
      }
    } catch (uErr) {
      report.steps.uploader = { status: 'error', error: String(uErr) };
      this._log('uploader_error', String(uErr));
    }

    // Slutrapport
    this._log('runFullSystem_complete', report);
    return report;
  } catch (err) {
    report.error = String(err);
    this._log('runFullSystem_fatal', report);
    return report;
  }
};

// ü©∫ testSystemHealth - anropar AIConnector.getHealth och loggar resultatet
AI_Controller.prototype.testSystemHealth = function() {
  var res = { timestamp: (new Date()).toISOString(), health: null };
  try {
    this._log('testSystemHealth', 'Kontrollerar AIConnector health...');
    if (typeof AIConnector !== 'undefined' && typeof AIConnector.getHealth === 'function') {
      try {
        var h = AIConnector.getHealth();
        res.health = h;
        this._log('testSystemHealth_result', h);
        return h;
      } catch (innerErr) {
        res.health = { status: 'error', error: String(innerErr) };
        this._log('testSystemHealth_error', String(innerErr));
        return res.health;
      }
    } else {
      throw new Error('AIConnector.getHealth saknas');
    }
  } catch (err) {
    res.health = { status: 'error', error: String(err) };
    this._log('testSystemHealth_fatal', res.health);
    return res.health;
  }
};

// üîÅ clearTriggers - rensa alla triggers f√∂r projektet
AI_Controller.prototype.clearTriggers = function() {
  var report = { timestamp: (new Date()).toISOString(), removed: 0, details: [] };
  try {
    this._log('clearTriggers', 'B√∂rjar rensa alla projekttriggers...');
    var triggers = ScriptApp.getProjectTriggers();
    for (var i = 0; i < triggers.length; i++) {
      try {
        var trig = triggers[i];
        var info = {
          handler: trig.getHandlerFunction ? trig.getHandlerFunction() : 'unknown',
          triggerUid: (trig.getUniqueId ? trig.getUniqueId() : 'no-uid')
        };
        ScriptApp.deleteTrigger(trig);
        report.removed++;
        report.details.push({ removed: true, info: info });
      } catch (tErr) {
        report.details.push({ removed: false, error: String(tErr) });
      }
    }
    this._log('clearTriggers_complete', report);
    return report;
  } catch (err) {
    report.error = String(err);
    this._log('clearTriggers_error', report);
    return report;
  }
};

// üï∞Ô∏è setupTriggers - skapa tidstriggers f√∂r analytics (dagligen), sync (timvis), uploader (var 15:e minut)
AI_Controller.prototype.setupTriggers = function() {
  var report = { timestamp: (new Date()).toISOString(), created: [], errors: [] };
  try {
    this._log('setupTriggers', 'Konfigurerar triggers: rensar f√∂rst befintliga triggers');
    // Rensa f√∂rst f√∂r att undvika duplicering
    try {
      this.clearTriggers();
    } catch (clearErr) {
      // forts√§tt √§ven om rensning misslyckas
      this._log('setupTriggers_clear_error', String(clearErr));
      report.errors.push({ stage: 'clear', error: String(clearErr) });
    }

    // 1) manualAnalytics - en g√•ng per dag
    try {
      ScriptApp.newTrigger('manualAnalytics').timeBased().everyDays(1).atHour(2).create(); // k√∂r runt 02:00
      report.created.push({ function: 'manualAnalytics', schedule: 'daily' });
      this._log('setupTriggers_created', 'manualAnalytics (daily) skapad');
    } catch (t1) {
      report.errors.push({ function: 'manualAnalytics', error: String(t1) });
      this._log('setupTriggers_error', 'manualAnalytics: ' + String(t1));
    }

    // 2) manualSync - varje timme
    try {
      ScriptApp.newTrigger('manualSync').timeBased().everyHours(1).create();
      report.created.push({ function: 'manualSync', schedule: 'hourly' });
      this._log('setupTriggers_created', 'manualSync (hourly) skapad');
    } catch (t2) {
      report.errors.push({ function: 'manualSync', error: String(t2) });
      this._log('setupTriggers_error', 'manualSync: ' + String(t2));
    }

    // 3) manualRun - var 15:e minut
    try {
      ScriptApp.newTrigger('manualRun').timeBased().everyMinutes(15).create();
      report.created.push({ function: 'manualRun', schedule: 'every15min' });
      this._log('setupTriggers_created', 'manualRun (every 15 minutes) skapad');
    } catch (t3) {
      report.errors.push({ function: 'manualRun', error: String(t3) });
      this._log('setupTriggers_error', 'manualRun: ' + String(t3));
    }

    // Logga sammanfattning
    this._log('setupTriggers_complete', report);
    return report;
  } catch (err) {
    report.error = String(err);
    this._log('setupTriggers_fatal', report);
    return report;
  }
};

/* =========================
   Top-level hj√§lpfunktioner (kallas direkt eller s√§tts som triggers)
   ========================= */

// K√∂r hela systemet (exponerad globalt s√• triggers/knappar kan anropa)
function runFullSystem() {
  var ctl = new AI_Controller();
  return ctl.runFullSystem();
}

// Testa systemh√§lsa (global)
function testSystemHealth() {
  var ctl = new AI_Controller();
  return ctl.testSystemHealth();
}

// Skapa triggers (global)
function setupTriggers() {
  var ctl = new AI_Controller();
  return ctl.setupTriggers();
}

// Rensa triggers (global)
function clearTriggers() {
  var ctl = new AI_Controller();
  return ctl.clearTriggers();
}

// En enkel test som k√∂r health + setupTriggers och loggar en sammanfattning
function manualControllerTest() {
  var ctl = new AI_Controller();
  try {
    var health = ctl.testSystemHealth();
    var triggers = ctl.setupTriggers();
    ctl._log('manualControllerTest_summary', { health: health, triggers: triggers });
  } catch (e) {
    ctl._log('manualControllerTest_error', String(e));
  }
}
