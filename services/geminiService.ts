import { ChatMessage, ChatSession, MessageSender } from '../types';

// =================================================================
// üß† 1. KOPPLING TILL LOKAL AI-SERVER
// =================================================================

/**
 * Sends a conversational message to the local AI server, enriched with cross-chat context.
 * @param message The user's current message.
 * @param currentHistory An array of previous messages from the active chat.
 * @param allSessions All available chat sessions to build a memory context.
 * @param activeSession The currently active chat session.
 * @param attachment Optional file attachment to be sent with the message.
 * @returns A text response from the AI.
 * @throws An error with a user-friendly message if something goes wrong.
 */
export const getLocalAIResponse = async (
  message: string, 
  currentHistory: ChatMessage[],
  allSessions: ChatSession[],
  activeSession: ChatSession,
  attachment?: { data: string; mimeType: string; name: string }
): Promise<string> => {
  try {
    // --- Bygg det ut√∂kade minnet och personligheten f√∂r AI:n ---
    const otherSessionTitles = allSessions
      .filter(s => s.id !== activeSession.id)
      .map(s => `- "${s.title}"`)
      .join('\n');

    const contextPreamble = `Du f√∂r en konversation med titeln "${activeSession.title}". Du har ocks√• tillg√•ng till minnen fr√•n f√∂ljande tidigare konversationer:\n${otherSessionTitles || "Inga andra konversationer √§n."}\n\nAnv√§nd denna kontext f√∂r att ge mer relevanta och insiktsfulla svar. Om anv√§ndaren refererar till ett tidigare √§mne, koppla det till r√§tt konversation.

**Din Personlighet:** Agera som en engagerad, digital assistent och strategisk partner. Din ton ska vara uppmuntrande och st√∂ttande. Om anv√§ndaren uttrycker sig negativt, k√§nner sig nere eller omotiverad, ska du svara med empati och erbjuda konkret hj√§lp och motivation. Var inte r√§dd f√∂r att anv√§nda lite humor och sk√§mta ibland f√∂r att l√§tta upp st√§mningen, men h√•ll alltid en professionell och hj√§lpsam grundton. Du √§r h√§r f√∂r att hj√§lpa i alla l√§gen, som en p√•litlig medarbetare.`;

    // Skapa en "system"-prompt som AI:n kan anv√§nda
    const contextualHistory = [
        { role: MessageSender.USER, content: contextPreamble },
        { role: MessageSender.AI, content: "Jag f√∂rst√•r. Jag √§r din strategiska partner, redo att hj√§lpa till med b√•de data och motivation. Hur kan jag assistera idag?" },
        ...currentHistory.map(msg => ({ role: msg.sender, content: msg.text })),
    ];
    // -----------------------------------------

    const requestBody: any = {
      prompt: message,
      history: contextualHistory,
    };

    if (attachment) {
      // The local server expects raw base64 data, not the full data URL.
      // Data URL format: "data:[<mediatype>];base64,<data>"
      const base64Data = attachment.data.split(',')[1];
      if (!base64Data) {
        throw new Error("Kunde inte extrahera filinneh√•ll. Kontrollera filformatet.");
      }
      requestBody.attachment = {
        data: base64Data,
        mimeType: attachment.mimeType,
      };
    }

    const response = await fetch('http://localhost:8000/api/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Error from local AI server:", errorText);
      if (response.status >= 500) {
        throw new Error("AI-hj√§rnan st√∂tte p√• ett internt fel. F√∂rs√∂k igen om en stund, eller kontrollera serverloggarna.");
      } else if (response.status === 404) {
        throw new Error("Kunde inte hitta AI-tj√§nsten. Kontrollera att serveradressen `http://localhost:8000/api/chat` √§r korrekt.");
      }
      throw new Error(`N√•got gick fel med anropet till servern (status: ${response.status}). Se konsolen f√∂r detaljer.`);
    }

    const data = await response.json();
    if (typeof data.response !== 'string') {
        throw new Error("AI-hj√§rnan gav ett svar i ett ov√§ntat format. Kontrollera att servern returnerar { response: '...' }.");
    }
    return data.response;

  } catch (error) {
    console.error("Kommunikationsfel med den lokala AI-servern:", error);
    if (error instanceof TypeError) {
      throw new Error("Kunde inte ansluta till den lokala AI-servern. Kontrollera att din Python-server √§r ig√•ng p√• `http://localhost:8000` och att brandv√§ggen inte blockerar anslutningen.");
    }
    if (error instanceof Error) throw error;
    throw new Error("Ett ok√§nt fel uppstod vid kommunikation med AI-servern.");
  }
};

/**
 * Asks the AI to generate a short, relevant title for a chat based on the first message.
 * @param firstMessage The user's first message in a new chat.
 * @returns A concise title string.
 */
export const generateChatTitle = async (firstMessage: string): Promise<string> => {
  try {
    const response = await fetch('http://localhost:8000/api/generate-title', { // New dedicated endpoint
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt: firstMessage }),
    });

    if (!response.ok) {
      console.error("Could not generate title from AI server.");
      return "Omd√∂pt Konversation"; // Fallback title
    }
    const data = await response.json();
    return data.title || "Omd√∂pt Konversation";
  } catch (error) {
    console.error("Error generating chat title:", error);
    return "Omd√∂pt Konversation"; // Fallback title
  }
};


// =================================================================
// üõ†Ô∏è 2. KOPPLING TILL LOKALA AI-VERKTYG
// =================================================================

export type AITool = 'transcribe' | 'translate';

/**
 * Executes a specific tool on the local AI server.
 * @param tool The name of the tool to execute.
 * @param params The parameters required by the tool.
 * @returns A text result from the executed tool.
 * @throws An error with a user-friendly message if the tool execution fails.
 */
export const executeAITool = async (tool: AITool, params: Record<string, any>): Promise<string> => {
  try {
    const response = await fetch('http://localhost:8000/api/tools', { // Note the new endpoint
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ tool, params }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Error from AI tool '${tool}':`, errorText);
      throw new Error(`Verktyget '${tool}' misslyckades (status: ${response.status}). Kontrollera serverloggarna.`);
    }

    const data = await response.json();
    if (typeof data.result !== 'string') {
      throw new Error(`Verktyget '${tool}' returnerade ett ov√§ntat format.`);
    }
    return data.result;

  } catch (error) {
    console.error(`Kommunikationsfel med AI-verktyget '${tool}':`, error);
    if (error instanceof TypeError) {
      throw new Error(`Kunde inte ansluta till AI-verktygsservern. Kontrollera att servern √§r ig√•ng och lyssnar p√• /api/tools.`);
    }
    if (error instanceof Error) throw error;
    throw new Error(`Ett ok√§nt fel uppstod vid anrop av verktyget '${tool}'.`);
  }
};
